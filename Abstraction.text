ABSTRACTION
  As programmer used to  hide all relevant  data about the object  , reducing complexity , increase its efficiency
 -Escaping Values
 -Improving
 -Testing

Improving the Create Method
- Start with the create method in user class
-Test the code
//Update
 <?php
  $user = User::find_user_by_id(2);
  $user->username = "TEST";
  $user->save();
?>

//create a record
 <?php
  $user = new User();
  $user->username = "TEST";
  $user->save();

?>
 <?php
 $user = User::find_user_by_id(9);

 $user->delete();
?>

Abstracting Tables
-Making the CRUD more universal
-Create a Property in user class
   eg : protected static  $db_table ="users";
-We can use on the table inside the SQL  "users"
-Create() on user class
   INSERT INTO users to  $sql = "INSERT INTO " .self::$db_table ."
-Update() on user class
   UPDATE users SET  to $sql = "UPDATE " .self::$db_table ." SET ";
--Delete() on user class
  $sql = "DELETE FROM  users  "; to $sql = "DELETE FROM  " .self::$db_table ."  ";

Abstracting Properties
 - we can reuse other method to other class
 -Example we can reuse other  method like delete() update() to other
   class in the future
-Create types of an array  like associative array create()

Abstracting the Create Method Part 1
-extract our attribute
-create a method properties in user class as protected function properties()
-Return the associative array created from   has_the_attribute($the_attribute)
     return get_object_vars($this);