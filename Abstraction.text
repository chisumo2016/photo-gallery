ABSTRACTION
  As programmer used to  hide all relevant  data about the object  , reducing complexity , increase its efficiency
 -Escaping Values
 -Improving
 -Testing

Improving the Create Method
- Start with the create method in user class
-Test the code
//Update
 <?php
  $user = User::find_user_by_id(2);
  $user->username = "TEST";
  $user->save();
?>

//create a record
 <?php
  $user = new User();
  $user->username = "TEST";
  $user->save();

?>
 <?php
 $user = User::find_user_by_id(9);

 $user->delete();
?>

Abstracting Tables
-Making the CRUD more universal
-Create a Property in user class
   eg : protected static  $db_table ="users";
-We can use on the table inside the SQL  "users"
-Create() on user class
   INSERT INTO users to  $sql = "INSERT INTO " .self::$db_table ."
-Update() on user class
   UPDATE users SET  to $sql = "UPDATE " .self::$db_table ." SET ";
--Delete() on user class
  $sql = "DELETE FROM  users  "; to $sql = "DELETE FROM  " .self::$db_table ."  ";

Abstracting Properties
 - we can reuse other method to other class
 -Example we can reuse other  method like delete() update() to other
   class in the future
-Create types of an array  like associative array create()

Abstracting the Create Method Part 1
-Get object_var
-extract our attribute from the create method
-create a method properties in user class as protected function properties()
-Return the associative array created from   has_the_attribute($the_attribute)
     return get_object_vars($this);
-use this to create key and value $properties = $this->properties(); loop and assign
    Example in create()


        //$sql = "INSERT INTO users (username, password, first_name,last_name)";
        $sql = "INSERT INTO " .self::$db_table ."(username, password, first_name,last_name)";
        $sql .="VALUES ('";
        $sql .= $database->escape_string($this->username) . "', '";
        $sql .= $database->escape_string($this->password) . "', '";
        $sql .= $database->escape_string($this->first_name) . "', '";
        $sql .= $database->escape_string($this->last_name) . "')";

        OR  Abstract method
        $properties = $this->properties();//column to seperate key s with key

        $sql = "INSERT INTO " .self::$db_table. "(". implode(",", array_keys($properties)) . ")";
        $sql .= "VALUES ('" . implode("','", array_values($properties)) . "')";

Modifying the properties method
-we are using the object var to get key and values
-Loop and assign
-Create an arrays  as regular array in user class not associative
         protected static  $db_table_fields =[
               'username',
               'first_name',
               'last_name',
               'password',
           ];
-Modify the  abstract properties
  protected  function properties(){}

Testing the Abstracted Create Method
 -Testing the create a method
 -Admin
    <?php
        $user = new User();
         $user->username     =   "test125";
         $user->first_name    =   "test15";
         $user->last_name    =   "test125";
         $user->password     =   "test125";

         $user->create();
         ?>
 Abstracting the Update Method
   - will be very trick
   -Bring object array
   -array pairs
     =Before
            global $database;
             //$sql = "UPDATE users SET ";
             $sql = "UPDATE " .self::$db_table ." SET ";
             $sql .="username = '" .$database->escape_string($this->username)   ."', ";
             $sql .="password = '" .$database->escape_string($this->password)   ."', ";
             $sql .="first_name = '" .$database->escape_string($this->first_name)   ."', ";
             $sql .="last_name = '" .$database->escape_string($this->last_name) ."' ";
             $sql .=" WHERE id =" .$database->escape_string($this->id);

             //save to database
             $database->query($sql);

             return (mysqli_affected_rows($database->connection) == 1) ? true : false;

    =After